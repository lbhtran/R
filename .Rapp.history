nstate <- t(istate)
}
nstate
steadyStates(urnmc)
?fractions
library(MASS)
?fractions
fractions(steadyStates(urnmc))
time0 <- t(as.matrix(c(1,0,0,0,0)))
time1 <- time0 * urnmc**1
time1
time2 <- time0 * urnmc**2
time2
time3 <- time0 * urnmc**3
time3
ctime <- c(time0, time1, time2, time3)
ctime
ctime <- c(t(time0), t(time1), t(time2), t(time3)
ctime
ctime <- c(t(time0), t(time1), t(time2), t(time3))
ctime
ctime <- c(as.matrix(time0), as.matrix(time1), as.matrix(time2), as.matrix(time3))
ctime
ctime <- rbind(time0, time1, time2, time3)
ctime
plot(ctime)
ctime <- cbind(time0, time1, time2, time3)
ctime
ctime <- cbind(t(time0), t(time1), t(time2), t(time3))
ctime
names(ctime)
summary(ctime)
plot(ctime[,0])
plot(ctime[0,])
plot(ctime[1,])
plot(ctime[,1])
plot(ctime[5,])
plot(ctime[1,])
?plot
plot(ctime[1,], type="b")
?plot
abline(ctime[2,])
?abline
abline(v=ctime[2,])
?abline
line(v=ctime[2,])
line(ctime[2,])
plot(ctime[1,], type="b")
lines(ctime[2,])
lines(ctime[3,])
lines(ctime[4,])
lines(ctime[5,])
time0 <- t(as.matrix(c(0,1,0,0,0)))#
time1 <- time0 * urnmc**1#
time2 <- time0 * urnmc**2#
time3 <- time0 * urnmc**3#
#
ctime <- cbind(t(time0), t(time1), t(time2), t(time3))#
ctime#
#
plot(ctime[1,], type="b")#
lines(ctime[2,])#
lines(ctime[3,])#
lines(ctime[4,])#
lines(ctime[5,])
A <- matrix(5,,)
time0 <- t(as.matrix(c(0,1,0,0,0)))
t = 10
for (i in 1:t) {#
	timei <- time0 * urnmc**i#
	pi <- cbind(t(time0),t(timei))#
}
pi
A <- matrix(5,,)
for (i in 0:t) {#
	timei <- time0 * urnmc**i#
	A <- cbind(A,t(timei))#
}
A <- matrix(4,,)
for (i in 0:t) {#
	timei <- time0 * urnmc**i#
	A <- cbind(A,t(timei))#
}
A <- matrix(,,)
for (i in 0:t) {#
	timei <- time0 * urnmc**i#
	A <- cbind(A,t(timei))#
}
row(time0)
A <- matrix(,5,)
for (i in 0:t) {
timei <- time0 * urnmc**i#
	A <- cbind(A,t(timei))#
}
A
A <- matrix(t(time0),5)
for (i in 1:t) {#
	timei <- time0 * urnmc**i#
	A <- cbind(A,t(timei))#
}
A
?lines
plot(A[1,], type="l")#
for (i in 2:5) {#
	lines(A[i,])#
}
t = 100
A <- matrix(t(time0),5)#
#
for (i in 1:t) {#
	timei <- time0 * urnmc**i#
	A <- cbind(A,t(timei))#
}
plot(A[1,], type="l")#
for (i in 2:5) {#
	lines(A[i,])#
}
time0 <- t(as.matrix(c(1,0,0,0,0)))
t = 100#
#
A <- matrix(t(time0),5)#
#
for (i in 1:t) {#
	timei <- time0 * urnmc**i#
	A <- cbind(A,t(timei))#
}#
#
plot(A[1,], type="l")#
for (i in 2:5) {#
	lines(A[i,])#
}
plot(A[1,], type="l")
lines(A[2,], col="blue")
lines(A[3,], col="red")
lines(A[4,], col="green")
lines(A[5,], col="yellow")
?lines
time0 <- t(as.matrix(c(0,0,1,0,0)))#
t = 100#
#
A <- matrix(t(time0),5)#
#
for (i in 1:t) {#
	timei <- time0 * urnmc**i#
	A <- cbind(A,t(timei))#
}#
#
plot(A[1,], type="l")#
for (i in 2:5) {#
	lines(A[i,])#
}
time0 <- t(as.matrix(c(0,0,1,0,0)))#
t = 100#
#
A <- matrix(t(time0),5)#
#
for (i in 1:t) {#
	timei <- time0 * urnmc**i#
	A <- cbind(A,t(timei))#
}#
#
plot(A[1,], type="l", ylim=c(0,1))#
for (i in 2:5) {#
	lines(A[i,])#
}
par(mfrow=c(3,2))
time0 <- t(as.matrix(c(1,0,0,0,0)))#
t = 100#
#
A <- matrix(t(time0),5)#
#
for (i in 1:t) {#
	timei <- time0 * urnmc**i#
	A <- cbind(A,t(timei))#
}#
#
plot(A[1,], type="l", ylim=c(0,1))#
for (i in 2:5) {#
	lines(A[i,])#
}
par(mfrow=c(2,3))
time0 <- t(as.matrix(c(1,0,0,0,0)))#
t = 100#
#
A <- matrix(t(time0),5)#
#
for (i in 1:t) {#
	timei <- time0 * urnmc**i#
	A <- cbind(A,t(timei))#
}#
#
plot(A[1,], type="l", ylim=c(0,1))#
for (i in 2:5) {#
	lines(A[i,])#
}
time0 <- t(as.matrix(c(0,1,0,0,0)))#
t = 100#
#
A <- matrix(t(time0),5)#
#
for (i in 1:t) {#
	timei <- time0 * urnmc**i#
	A <- cbind(A,t(timei))#
}#
#
plot(A[1,], type="l", ylim=c(0,1))#
for (i in 2:5) {#
	lines(A[i,])#
}
time0 <- t(as.matrix(c(0,0,1,0,0)))#
t = 100#
#
A <- matrix(t(time0),5)#
#
for (i in 1:t) {#
	timei <- time0 * urnmc**i#
	A <- cbind(A,t(timei))#
}#
#
plot(A[1,], type="l", ylim=c(0,1))#
for (i in 2:5) {#
	lines(A[i,])#
}
par(mfrow=c(2,3))
time0 <- t(as.matrix(c(1,0,0,0,0)))#
t = 20#
#
A <- matrix(t(time0),5)#
#
for (i in 1:t) {#
	timei <- time0 * urnmc**i#
	A <- cbind(A,t(timei))#
}#
#
plot(A[1,], type="l", ylim=c(0,1))#
for (i in 2:5) {#
	lines(A[i,])#
}
time0 <- t(as.matrix(c(0,1,0,0,0)))#
t = 20#
#
A <- matrix(t(time0),5)#
#
for (i in 1:t) {#
	timei <- time0 * urnmc**i#
	A <- cbind(A,t(timei))#
}#
#
plot(A[1,], type="l", ylim=c(0,1))#
for (i in 2:5) {#
	lines(A[i,])#
}
time0 <- t(as.matrix(c(0,0,1,0,0)))#
t = 20#
#
A <- matrix(t(time0),5)#
#
for (i in 1:t) {#
	timei <- time0 * urnmc**i#
	A <- cbind(A,t(timei))#
}#
#
plot(A[1,], type="l", ylim=c(0,1))#
for (i in 2:5) {#
	lines(A[i,])#
}
time0 <- t(as.matrix(c(0,0,0,1,0)))#
t = 20#
#
A <- matrix(t(time0),5)#
#
for (i in 1:t) {#
	timei <- time0 * urnmc**i#
	A <- cbind(A,t(timei))#
}#
#
plot(A[1,], type="l", ylim=c(0,1))#
for (i in 2:5) {#
	lines(A[i,])#
}
time0 <- t(as.matrix(c(0,0,0,0,1)))#
t = 20#
#
A <- matrix(t(time0),5)#
#
for (i in 1:t) {#
	timei <- time0 * urnmc**i#
	A <- cbind(A,t(timei))#
}#
#
plot(A[1,], type="l", ylim=c(0,1))#
for (i in 2:5) {#
	lines(A[i,])#
}
A
row(A)
library(markovchain)#
urnstate <- c("0","1","2","3","4")#
#
byRow <- T#
#
Tmatrix <- matrix(data= c(0,1,0,0,0,1/4,0,3/4,0,0,0,2/4,0,2/4,0,0,0,3/4,0,1/4,0,0,0,1,0), byrow = T, nrow=5, dimnames = list(urnstate,urnstate))#
#
urnmc <- new("markovchain", states = urnstate, byrow=T, transitionMatrix = Tmatrix, name = "Urn1")#
#
urnmc
n<-10#
nstate <- vector(,length(n))#
for (i in 0:n) {#
	istate <- initialstate*(urnmc)**i#
	nstate <- t(istate)#
}#
nstate
time0 <- t(as.matrix(c(0,0,0,0,1)))#
t = 20#
#
A <- matrix(t(time0),5)#
#
for (i in 1:t) {#
	timei <- time0 * urnmc**i#
	A <- cbind(A,t(timei))#
}#
#
plot(A[1,], type="l", ylim=c(0,1))#
for (i in 2:5) {#
	lines(A[i,])#
}
A
inistate <- diag(5)
as.matrix(c(0,0,0,0,1))
inistate[,1]
par(mfrow=c(2,3))
inistate <- diag(5)#
t <- 20#
for (i in 1:5) {#
	time0 <- inistate[,i]#
	A <- matrix(time0,5)#
	for (i in 1:t) {#
		timei <- time0 * urnmc**i#
		A <- cbind(A,t(timei))#
	}#
	plot(A[1,], type="l", ylim=c(0,1))#
	for (i in 2:5) {#
		lines(A[i,])#
	}	#
}
gamblerRuinMarkovChain <- function(moneyMax, prob = 0.5) {#
	require(matlab)#
	matr <- zeros(moneyMax + 1)#
	states <- as.character(seq(from = 0, to = moneyMax, by = 1))#
	rownames(matr) = states; colnames(matr) = states#
	matr[1,1] = 1;matr[moneyMax + 1,moneyMax + 1] = 1#
	for(i in 2:moneyMax) {#
		matr[i,i-1] = 1-prob;matr[i,i+1] = prob#
	}#
	out <- new("markovchain", transitionMatrix = matr, name = paste("Gambler ruin", moneyMax, "dim", sep = " "))#
	return(out)#
}
mcGR4 <- gamblerRuinMarkovChain(moneyMax = 4, prob = 0.5)
library(matlab)
gamblerRuinMarkovChain <- function(moneyMax, prob = 0.5) {#
	require(matlab)#
	matr <- zeros(moneyMax + 1)#
	states <- as.character(seq(from = 0, to = moneyMax, by = 1))#
	rownames(matr) = states; colnames(matr) = states#
	matr[1,1] = 1;matr[moneyMax + 1,moneyMax + 1] = 1#
	for(i in 2:moneyMax) {#
		matr[i,i-1] = 1-prob;matr[i,i+1] = prob#
	}#
	out <- new("markovchain", transitionMatrix = matr, name = paste("Gambler ruin", moneyMax, "dim", sep = " "))#
	return(out)#
}
mcGR4 <- gamblerRuinMarkovChain(moneyMax = 4, prob = 0.5)
mcGR4
summary(urnmc)
summary(mcGR4)
firstpassage
firstPassage(urnmc,state="2",20)
?firstPassage
time0 <- t(as.matrix(c(0,0,0,0,1)))#
t = 20#
#
A <- matrix(t(time0),5)#
#
for (i in 1:t) {#
	timei <- time0 %*% urnmc**i#
	A <- cbind(A,t(timei))#
}#
#
A
time0 <- as.matrix(c(0,1,0,0,0))#
time1 <- time0 * urnmc**1#
time2 <- time0 * urnmc**2#
time3 <- time0 * urnmc**3
urnstate <- c("0","1","2","3","4")#
#
byRow <- T#
#
Tmatrix <- matrix(data= c(0,1,0,0,0,1/4,0,3/4,0,0,0,2/4,0,2/4,0,0,0,3/4,0,1/4,0,0,0,1,0), byrow = T, nrow=5, dimnames = list(urnstate,urnstate))#
#
urnmc <- new("markovchain", states = urnstate, byrow=T, transitionMatrix = Tmatrix, name = "Urn1")
time0 <- as.matrix(c(0,1,0,0,0))#
time1 <- time0 * urnmc**1#
time2 <- time0 * urnmc**2#
time3 <- time0 * urnmc**3
time0 <- t(as.matrix(c(0,1,0,0,0)))
time1 <- time0 * urnmc**1
time2 <- time0 * urnmc**2
time3 <- time0 * urnmc**3
Sn <- time0+time1
Sn
Sn <- (1/2)*(time0+time1)
Sn
Sn <- matrix(time0,5)#
for (i in 1:t) {#
	timei <- time0 * urnmc**i#
	sumi <- sumi+timei#
	Sn <- cbind(Sn, (1/(i+1))*sumi)#
}
sumi <- time0
for (i in 1:t) {#
	timei <- time0 * urnmc**i#
	sumi <- sumi+timei#
	Sn <- cbind(Sn, (1/(i+1))*sumi)#
}
sumi <- time0
timei <- time0 * urnmc**i
sumi <- sumi+timei
sumi
for (i in 1:t) {#
	timei <- time0 * urnmc**i#
	sumi <- sumi+timei#
	Sn <- cbind(Sn, (1/(i+1))*t(sumi))#
}
Sn
t = 2
for (i in 1:t) {#
	timei <- time0 * urnmc**i#
	sumi <- sumi+timei#
	Sn <- cbind(Sn, (1/(i+1))*t(sumi))#
}
Sn
Sn <- matrix(time0,5)
sumi <- time0
t=2
Sn <- matrix(time0,5)
sumi <- time0
for (i in 1:t) {
timei <- time0 * urnmc**i
sumi <- sumi+timei
Sn <- cbind(Sn, (1/(i+1))*t(sumi))
}
Sn
t=3
Sn <- matrix(time0,5)
sumi <- time0
for (i in 1:t) {
timei <- time0 * urnmc**i
sumi <- sumi+timei
Sn <- cbind(Sn, (1/(i+1))*t(sumi))
}
Sn
t=20
Sn <- matrix(time0,5)
sumi <- time0
for (i in 1:t) {
timei <- time0 * urnmc**i
sumi <- sumi+timei
Sn <- cbind(Sn, (1/(i+1))*t(sumi))
}
Sn
t=200
Sn <- matrix(time0,5)#
sumi <- time0
for (i in 1:t) {#
	timei <- time0 * urnmc**i#
	sumi <- sumi+timei#
	Sn <- cbind(Sn, (1/(i+1))*t(sumi))#
}#
Sn
steadyStates(urnmc)
t=2000
Sn <- matrix(time0,5)
sumi <- time0
for (i in 1:t) {#
	timei <- time0 * urnmc**i#
	sumi <- sumi+timei#
	Sn <- cbind(Sn, (1/(i+1))*t(sumi))#
}
Sn[,2001]
t=10000
Sn <- matrix(time0,5)
sumi <- time0
for (i in 1:t) {
timei <- time0 * urnmc**i
sumi <- sumi+timei
Sn <- cbind(Sn, (1/(i+1))*t(sumi))
}
Sn[,2001]
Sn[,10001]
steadyStates(urnmc)
t=20
Sn <- matrix(time0,5)#
sumi <- time0
for (i in 1:t) {#
	timei <- time0 * urnmc**i#
	sumi <- sumi+timei#
	Sn <- cbind(Sn, (1/(i+1))*t(sumi))#
}
plot(Sn[1,], type="l", ylim=c(0,1))#
for (i in 2:5) {#
	lines(Sn[i,])#
}
t=10000
Sn <- matrix(time0,5)#
sumi <- time0
for (i in 1:t) {#
	timei <- time0 * urnmc**i#
	sumi <- sumi+timei#
	Sn <- cbind(Sn, (1/(i+1))*t(sumi))#
}
plot(Sn[1,], type="l", ylim=c(0,1))#
for (i in 2:5) {#
	lines(Sn[i,])#
}
library(markovchain)#
urnstate <- c("0","1","2","3","4")#
#
byRow <- T#
#
Tmatrix <- matrix(data= c(0.5,0.5,0,0,0,1/4,0,3/4,0,0,0,2/4,0,2/4,0,0,0,3/4,0,1/4,0,0,0,1,0), byrow = T, nrow=5, dimnames = list(urnstate,urnstate))#
#
urnmc2 <- new("markovchain", states = urnstate, byrow=T, transitionMatrix = Tmatrix, name = "Urn1")#
#
urnmc2
time0 <- t(as.matrix(c(0,0,0,0,1)))#
t = 20#
#
A <- matrix(t(time0),5)#
#
for (i in 1:t) {#
	timei <- time0 * urnmc2**i#
	A <- cbind(A,t(timei))#
}#
#
A
plot(A[1,], type="l", ylim=c(0,1))#
for (i in 2:5) {#
	lines(A[i,])#
}
t=50#
#
Sn <- matrix(time0,5)#
sumi <- time0#
for (i in 1:t) {#
	timei <- time0 * urnmc**i#
	sumi <- sumi+timei#
	Sn <- cbind(Sn, (1/(i+1))*t(sumi))#
}#
Sn[,51]
t=50#
#
Sn <- matrix(time0,5)#
sumi <- time0#
for (i in 1:t) {#
	timei <- time0 * urnmc2**i#
	sumi <- sumi+timei#
	Sn <- cbind(Sn, (1/(i+1))*t(sumi))#
}#
Sn[,51]#
#
steadyStates(urnmc2)
plot(Sn[1,], type="l", ylim=c(0,1))#
for (i in 2:5) {#
	lines(Sn[i,])#
}
library(markovchain)#
urnstate <- c("0","1","2","3","4")
Tmatrix <- matrix(data= c(0,1,0,0,0,1/4,0,3/4,0,0,0,2/4,0,2/4,0,0,0,3/4,0,1/4,0,0,0,1,0), byrow = T, nrow=5, dimnames = list(urnstate,urnstate))#
#
urnmc <- new("markovchain", states = urnstate, byrow=T, transitionMatrix = Tmatrix, name = "Urn1")
urnmc
time0 <- t(as.matrix(c(0,0,0,0,1)))#
t = 20#
#
A <- matrix(t(time0),5)#
#
for (i in 1:t) {#
	timei <- time0 * urnmc**i#
	A <- cbind(A,t(timei))#
}
A
plot(A[1,], type="l", ylim=c(0,1))#
for (i in 2:5) {#
	lines(A[i,])#
}
A <- matrix(t(time0),5)
time0 <- t(as.matrix(c(0,0,0,0,1)))#
t = 20
A <- matrix(t(time0),5)#
#
for (i in 1:t) {#
	timei <- time0 * urnmc**i#
	A <- cbind(A,t(timei))#
}
plot(A[1,], type="l", ylim=c(0,1))#
for (i in 2:5) {#
	lines(A[i,])#
}
time0 <- t(as.matrix(c(0,0,0,1,0)))#
t = 20#
#
A <- matrix(t(time0),5)#
#
for (i in 1:t) {#
	timei <- time0 * urnmc**i#
	A <- cbind(A,t(timei))#
}#
plot(A[1,], type="l", ylim=c(0,1))#
for (i in 2:5) {#
	lines(A[i,])#
}
par(mfrow=c(2,3))
inistate <- diag(5)#
t <- 20#
for (i in 1:5) {#
	time0 <- inistate[,i]#
	A <- matrix(time0,5)#
	for (i in 1:t) {#
		timei <- time0 * urnmc**i#
		A <- cbind(A,t(timei))#
	}#
	plot(A[1,], type="l", ylim=c(0,1))#
	for (i in 2:5) {#
		lines(A[i,])#
	}	#
}
t=50#
#
Sn <- matrix(time0,5)#
sumi <- time0#
for (i in 1:t) {#
	timei <- time0 * urnmc**i#
	sumi <- sumi+timei#
	Sn <- cbind(Sn, (1/(i+1))*t(sumi))#
}
plot(Sn[1,], type="l", ylim=c(0,1))#
for (i in 2:5) {#
	lines(Sn[i,])#
}
time0 <- t(as.matrix(c(0,1,0,0,0)))
Sn <- matrix(time0,5)#
sumi <- time0#
for (i in 1:t) {#
	timei <- time0 * urnmc**i#
	sumi <- sumi+timei#
	Sn <- cbind(Sn, (1/(i+1))*t(sumi))#
}
plot(Sn[1,], type="l", ylim=c(0,1))#
for (i in 2:5) {#
	lines(Sn[i,])#
}
Tmatrix <- matrix(data= c(0.5,0.5,0,0,0,1/4,0,3/4,0,0,0,2/4,0,2/4,0,0,0,3/4,0,1/4,0,0,0,1,0), byrow = T, nrow=5, dimnames = list(urnstate,urnstate))#
#
urnmc2 <- new("markovchain", states = urnstate, byrow=T, transitionMatrix = Tmatrix, name = "Urn1")#
#
urnmc2
time0 <- t(as.matrix(c(0,0,0,0,1)))#
t = 20#
#
A <- matrix(t(time0),5)#
#
for (i in 1:t) {#
	timei <- time0 * urnmc2**i#
	A <- cbind(A,t(timei))#
}
plot(A[1,], type="l", ylim=c(0,1))#
for (i in 2:5) {#
	lines(A[i,])#
}
t=50#
#
Sn <- matrix(time0,5)#
sumi <- time0#
for (i in 1:t) {#
	timei <- time0 * urnmc2**i#
	sumi <- sumi+timei#
	Sn <- cbind(Sn, (1/(i+1))*t(sumi))#
}
plot(Sn[1,], type="l", ylim=c(0,1))#
for (i in 2:5) {#
	lines(Sn[i,])#
}
t = 2000#
#
A <- matrix(t(time0),5)#
#
for (i in 1:t) {#
	timei <- time0 * urnmc2**i#
	A <- cbind(A,t(timei))#
}
plot(A[1,], type="l", ylim=c(0,1))#
for (i in 2:5) {#
	lines(A[i,])#
}
summary(urnmc2)
plot(A[1,], type="l", ylim=c(0,1))#
for (i in 2:5) {#
	lines(A[i,])#
}
time0 <- t(as.matrix(c(0,0,0,1,0)))#
t = 20#
#
A <- matrix(t(time0),5)#
#
for (i in 1:t) {#
	timei <- time0 * urnmc**i#
	A <- cbind(A,t(timei))#
}
plot(A[1,], type="l", ylim=c(0,1))#
for (i in 2:5) {#
	lines(A[i,])#
}
plot(A[1,], type="l", ylim=c(0,1))
time0 <- t(as.matrix(c(0,0,1,0,0)))
A <- matrix(t(time0),5)#
#
for (i in 1:t) {#
	timei <- time0 * urnmc**i#
	A <- cbind(A,t(timei))#
}
lines(A[1,])
time0 <- t(as.matrix(c(0,1,0,0,0)))
A <- matrix(t(time0),5)#
#
for (i in 1:t) {#
	timei <- time0 * urnmc**i#
	A <- cbind(A,t(timei))#
}
lines(A[1,])
time0 <- t(as.matrix(c(1,0,0,0,0)))
A <- matrix(t(time0),5)#
#
for (i in 1:t) {#
	timei <- time0 * urnmc**i#
	A <- cbind(A,t(timei))#
}
lines(A[1,])
time0 <- t(as.matrix(c(0,0,0,0,1)))
A <- matrix(t(time0),5)#
#
for (i in 1:t) {#
	timei <- time0 * urnmc**i#
	A <- cbind(A,t(timei))#
}
lines(A[1,])
